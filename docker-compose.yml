# Defines how to run microChasm microservices inside
# Docker containers
#
# Tuned for development
# General patterns: 
#  - Set build directory to microservice root
#  - Set env variable so Confidence loads docker environment
#  - mount host source code in container so latest source is used

#servicename:
#  build: ./servicename
#  dockerfile: Dockerfile.frombase
#  command: nodemon server.js
#  environment:
#   - NODE_ENV=local_docker
#   - LOG_STYE=default
#  ports:
#   - "8081:9080"
#  volumes:
#   - ./servicename:/pufftml/servicename
#  links:
#   - redis

# docker-compose snippet for puffin
puffin:
  build: ./puffin
  dockerfile: Dockerfile.frombase
  command: nodemon server.js
  environment:
   - DEBUG_LEVEL=debug
   - NODE_ENV=local_docker
   - LOG_STYLE=default
  ports:
   - 9080:9080
  volumes:
   - ./puffin:/pufftml/puffin
  links:
   - redis
# <Insert microservice configuration above this>

#TODO: collect redis, rabbitmq or other services support from chasm creation or update file when microservices added
redis:
  image: redis
  ports:
  - "6379:6379"
  volumes:
  - /data/redis:/data

rethinkdb:
  image: rethinkdb
  ports:
  - "8081:8080"
  - "28015:28015"
  - "29015:29015"
  volumes_from:
    - rtdbData

# It is recommended to use a separate container for data volumes.
# This provides some benefits, for e.g., the db container can be upgraded without affecting the data
rtdbData:
  image: busybox
  volumes:
    - /data
  command: echo Data Volume for rethinkdb

mq:
  image: rabbitmq:3.5.4-management
  # If you need to manually set the hostname, here is how:
  # environment:
  # - RABBITMQ_NODENAME=my-rabbit
  ports:
   - "5672:5672"
   - "15672:15672"

